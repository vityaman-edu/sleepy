sleepy: |-
  (sum (div 5 2) (rem (sum 2 2) 2))

tafka: |-
  000. procedure @main() -> int {
  000. main:
  001.   %0: int = load $5: int
  002.   %1: int = load $2: int
  003.   %2: int = div %0: int, %1: int
  004.   %3: int = load $2: int
  005.   %4: int = load $2: int
  006.   %5: int = sum %3: int, %4: int
  007.   %6: int = load $2: int
  008.   %7: int = rem %5: int, %6: int
  009.   %8: int = sum %2: int, %7: int
  010.   return %8: int
  010. }

tafka-usages: |
  $main: () -> int:
  001. %0: r3 w0
  002. %1: r3 w0
  003. %0: r0 w0, %1: r0 w0, %2: r9 w0
  004. %3: r6 w0
  005. %4: r6 w0
  006. %3: r0 w0, %4: r0 w0, %5: r8 w0
  007. %6: r8 w0
  008. %5: r0 w0, %6: r0 w0, %7: r9 w0
  009. %2: r0 w0, %7: r0 w0, %8: r10 w0
  010. %8: r0 w0


asmik-virt: |-
  memory stack
  0000: 0
  0008: 5
  0016: 2
  memory instr
  0000: addim v0, ze, 8
  0004: load v0, v0
  0008: addim v1, ze, 16
  0012: load v1, v1
  0016: divi v2, v0, v1
  0020: addim v3, ze, 16
  0024: load v3, v3
  0028: addim v4, ze, 16
  0032: load v4, v4
  0036: addi v5, v3, v4
  0040: addim v6, ze, 16
  0044: load v6, v6
  0048: remi v7, v5, v6
  0052: addi v8, v2, v7
  0056: addim a1, v8, 0
  0060: brn ze, ra

sleepy: |-
  (def qsum (lambda (a int b int)
    (sum (mul a a) (mul b b))))
  (qsum 1 2)

tafka: |-
  000. procedure @0(%0: int, %1: int) -> int {
  000. 0:
  001.   %2: int = mul %0: int, %0: int
  002.   %3: int = mul %1: int, %1: int
  003.   %4: int = sum %2: int, %3: int
  004.   return %4: int
  004. }
  004. 
  004. main:
  005.   %5: (int, int) -> int = load $0: (int, int) -> int
  006.   %6: int = load $1: int
  007.   %7: int = load $2: int
  008.   %8: int = invoke @5 %6: int, %7: int
  009.   return %8: int

tafka-usages: |
  001. %5: r4 w0
  002. %6: r4 w0
  003. %7: r4 w0
  004. %8: r5 w0, %5: r0 w0, %6: r0 w0, %7: r0 w0
  005. %8: r0 w0


asmik-virt: |-
  memory stack
  0000: 1
  0008: 2
  0016: 60
  memory instr
  0000: addim v0, ze, 16
  0004: load v0, v0
  0008: addim v1, ze, 0
  0012: load v1, v1
  0016: addim v2, ze, 8
  0020: load v2, v2
  0024: addim a1, v1, 0
  0028: addim a2, v2, 0
  0032: addim v3, ra, 0
  0036: addim ra, ip, 4
  0040: brn ze, v0
  0044: addim v4, a1, 0
  0048: addim ra, v3, 0
  0052: addim a1, v4, 0
  0056: brn ze, ra
  0060: addim v5, a1, 0
  0064: addim v6, a2, 0
  0068: muli v7, v5, v5
  0072: muli v8, v6, v6
  0076: addi v9, v7, v8
  0080: addim a1, v9, 0
  0084: brn ze, ra
